[tool.poetry]
name = "babeltron"
version = "0.1.0"
description = "A Python-based REST API that leverages single multilingual models like mBERT to provide efficient text translation services"
authors = ["Pedro Soares <pedrofigueiredoc@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/hspedro/babeltron"
packages = [{include = "babeltron"}]

[tool.poetry.dependencies]
python = "^3.9"
torch = "^2.0.0"
transformers = "^4.30.0"
sentencepiece = "^0.1.99"
grpcio = "^1.54.0"
grpcio-tools = "^1.54.0"
fastapi = "^0.95.1"
uvicorn = "^0.22.0"
redis = "^5.2.1"
orjson = "^3.10.15"
prometheus-client = "^0.21.1"
starlette-prometheus = "^0.10.0"
opentelemetry-api = "^1.30.0"
opentelemetry-sdk = "^1.30.0"
opentelemetry-exporter-jaeger = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.51b0"
opentelemetry-exporter-otlp = "^1.30.0"
opentelemetry-instrumentation-logging = "^0.51b0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
black = "^23.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
httpx = "^0.27.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.25.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest]
testpaths = ["tests/unit"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "asyncio: mark a test as an asyncio test",
]

[tool.coverage.run]
source = ["babeltron"]
omit = ["tests/*"]

[tool.pytest.ini_options]
testpaths = ["tests/unit"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "asyncio: mark a test as an asyncio test",
]
